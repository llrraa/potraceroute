class TracerouteHop(object):
    '''
    object to represent (and evaluate) the result of a traceroute probe

    tobject - Traceroute object related to this probe
    ttl - TTL for the probe
    msg - user message of status
    final - true if no need to probe again with higher TTL
    reached - true if destination was reached
    rxdata - layer 3 data to add to representation (UDP or TCP response)
    rxpacket - ICMP packet to parse

    if rxpacket is provided, we parse the ICMP packet (and if it is a
    TTL Expired packet, also its payload which should contain the IP header
    and first 8 bytes of our probe packet)
    '''
    def __init__(self, tobject, ttl, msg="Status Unknown", final=False, rxdata=None, rxpacket=None, reached=False):
        self.tobject = tobject
        self.ttl = ttl
        self.msg = msg
        self.final = final
        self.reached = reached
        self.rxdata = rxdata
        self.rxpacket = rxpacket
        if self.rxpacket is not None:
            self.ipfields = IPPacket(rxpacket)
            if self.ipfields.ip_protocol == IPProtocol.number("ICMP"):
			

            sys.exit(main())

    def probe(self, ttl):
        '''
        send a packet of the desired protocol with a crafted TTL
        and parse the ICMP TTL Exceeded response that (hopefully) comes
        back, or detect timeout or successfully contact with the remote host
        '''

_setup_sockets, gtraceroute.py:525
probe, gtraceroute.py:437
main, gtraceroute.py:703
<module>, gtraceroute.py:722
execfile, _pydev_execfile.py:18
run, pydevd.py:1068
main, pydevd.py:1658
<module>, pydevd.py:1664

    def _setup_sockets(self, ttl):
        '''
        create sockets needed for the traceroute and send the probe packet
        '''
send_ping_packet, gtraceroute.py:424
_setup_sockets, gtraceroute.py:568
probe, gtraceroute.py:437
main, gtraceroute.py:703
<module>, gtraceroute.py:722
execfile, _pydev_execfile.py:18
run, pydevd.py:1068
main, pydevd.py:1658
<module>, pydevd.py:1664

    def send_ping_packet(self, seq, data=""):
        packet = IPParse.pack_icmp(data, icmp_type=8, icmp_code=0, icmp_checksum=0, icmp_id=self.icmp_id, icmp_seq=seq)
        self.icmp_socket.sendto(packet, (self.destination_addr, 1))



        self.send_udp_socket = None
                        rxdata = self.send_udp_socket.recv(120)
            self.send_udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, IPProtocol.number("UDP"))
            self._bind_source_info(self.send_udp_socket)
            self.send_udp_socket.setsockopt(socket.SOL_IP, socket.IP_TTL, ttl)
            self.send_udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.slist = [self.send_udp_socket]
            self.send_udp_socket.sendto(payload, (self.destination_addr, self.port))
            self.source_port = self.send_udp_socket.getsockname()[1]
            self.send_udp_socket.close()
    object to represent (and evaluate) the result of a traceroute probe
    tobject - Traceroute object related to this probe
    ttl - TTL for the probe
    final - true if no need to probe again with higher TTL
    and first 8 bytes of our probe packet)
        true if the ICMP packet recieved is not a response to our probe
        return False # this reply sure looks like an answer to our probe
    traceroute "session" object where we store data re-used by each probe
    def probe(self, ttl):
        create sockets needed for the traceroute and send the probe packet
                      help="interface IP to send probe traffic from")
                      help="source port for TCP/UDP probes")
                  help="hex string to use as data in UDP or ICMP probe packet")
            thishop = trace.probe(ttl)
class TracerouteHop(object):
            return TracerouteHop(self, ttl, "Unexpected local socket error: {oops}".format(oops=oops), final=True)
                            return TracerouteHop(self, ttl, "UDP port {port} responded".format(port=self.port), final=True, reached=True, rxdata=rxdata)
                            return TracerouteHop(self, ttl, "TCP port {port} connection successful".format(port=self.port), final=True, reached=True, rxdata=rxdata)
                        return TracerouteHop(self, ttl, "TCP port {port} connection refused".format(port=self.port), final=True, reached=True)
                            return TracerouteHop(self, ttl, "TCP port {port} connection refused".format(port=self.port), final=True, reached=True)
                    return TracerouteHop(self, ttl, "TCP port {port} connection successful.".format(port=self.port), final=True, reached=True)
                hop = TracerouteHop(self, ttl, msg="received ICMP response", rxpacket=rx_packet)
        return TracerouteHop(self, ttl, "*\ttimed out")
class TCPPacket(IPPacket):
                        self.rp_datafields = TCPPacket(self.rp_ipfields.payload)
class TCPPacket(IPPacket):
    def _pack_generic(parse_table, **kwargs):
        packet = IPParse._pack_generic(IPParse.icmp_parsetab, **kwargs) + payload
            packet = IPParse._pack_generic(IPParse.icmp_parsetab, **kwargs) + payload